import openai
import tiktoken
import json
import copy as cp
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--data_path', help='Path to the json generated by the github extractor')
parser.add_argument('--openai_key' , help='OpenAI API key')
parser.add_argument('--saving_path',default= 'README.md')


args = parser.parse_args()


## tokenizer for counting tokens( for GPT 3.5 turbo)

tokenizer = tiktoken.get_encoding("cl100k_base")
'''
def create_chunks(text, n, tokenizer):
    tokens = tokenizer.encode(text)
    """Yield successive n-sized chunks from text."""
    i = 0
    while i < len(tokens):
        # Find the nearest end of sentence within a range of 0.5 * n and 1.5 * n tokens
        j = min(i + int(1.5 * n), len(tokens))
        while j > i + int(0.5 * n):
            # Decode the tokens and check for full stop or newline
            chunk = tokenizer.decode(tokens[i:j])
            if chunk.endswith(".") or chunk.endswith("\n"):
                break
            j -= 1
        # If no end of sentence found, use n tokens as the chunk size
        if j == i + int(0.5 * n):
            j = min(i + n, len(tokens))
        yield tokens[i:j]
        i = j
'''

def get_completion(prompt, model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message["content"]


openai.api_key = args.openai_key


# loading files

data_path = args.data_path

with open(data_path ,'r') as f:
    data = json.load(f)


files = [x['contents'] for x in data]

## send each file with a summarizing prompt
responses=[]
for f in files:
    prompt1 = f'''
You are a expert developer , you want to give back a summary of the most valuale information
This information will be later needed to write a README . It also needs to mention the main dependencies
and installation precedures
The following codefile is below delimited by triple backticks
```{f}```
'''
    response = get_completion(prompt1)
    responses.append(cp.deepcopy(response))

# print(responses)
for response in responses:
    print(response)
    print('-------------------------------------------------------------------------------------------------------')

## Synthetize all the summaries in a README

responses_all =''
for resp in responses:
    responses_all+=resp

prompt_final = f'''
You are a expert developer , you need to synthesize a README from the given summaries .
Each summary is for one file in the project
We want an output with markdown.

The following summaries are below   delimited by triple backticks.
```{responses_all}```
'''
response = get_completion(prompt_final)
print(response)

## Saving readme file
saving_path = args.saving_path

with open(saving_path,'w') as f:
    f.write(response)








